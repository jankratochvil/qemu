##
# = Virtio devices
##

##
# @VirtioInfo:
#
# Information about a given VirtIODevice
#
# @type: VirtIO device type.
#
# @path: VirtIO device canonical path.
#
# Since: 5.1
#
##
{ 'struct': 'VirtioInfo',
  'data': {
    'path': 'str',
    'type': 'str'
  }
}

##
# @query-virtio:
#
# Return the list of all VirtIO devices
#
# Returns: list of @VirtioInfo
#
# Since: 5.1
#
# Example:
#
# -> { "execute": "query-virtio" }
# <- { "return": [
#        {
#            "path": "/machine/peripheral-anon/device[3]/virtio-backend",
#            "type": "virtio-net"
#        },
#        {
#            "path": "/machine/peripheral-anon/device[1]/virtio-backend",
#            "type": "virtio-serial"
#        },
#        {
#            "path": "/machine/peripheral-anon/device[0]/virtio-backend",
#            "type": "virtio-blk"
#        }
#      ]
#    }
#
##

{ 'command': 'query-virtio', 'returns': ['VirtioInfo'] }

##
# @VirtioStatus:
#
# @device_id: VirtIODevice status
#
# @device_endian: VirtIODevice device_endian
#
# @guest_features: VirtIODevice guest_features
#
# @host_features: VirtIODevice host_features
#
# @backend_features: VirtIODevice backend_features
#
# @num_vqs: number of VirtIODevice queues
#
# Since: 5.1
#
##

{ 'struct': 'VirtioStatus',
  'data': {
    'device_id': 'int',
    'device_endian': 'str',
    'guest_features': 'uint64',
    'host_features': 'uint64',
    'backend_features': 'uint64',
    'num_vqs': 'uint16'
  }
}

##
# @virtio-status:
#
# Return the status of virtio device
#
# @path: QOBject path of the VirtIODevice
#
# Returns: status of the VirtIODevice
#
# Since: 5.1
#
# Example:
#
# -> { "execute": "virtio-status",
#      "arguments": {
#          "path": "/machine/peripheral-anon/device[3]/virtio-backend"
#      }
#   }
# <- { "return": {
#          "backend_features": 0,
#          "guest_features": 5111807911,
#          "num_vqs": 3,
#          "host_features": 6337593319,
#          "device_endian": "little",
#          "device_id": 1
#      }
#    }
#
##

{ 'command': 'virtio-status',
  'data': { 'path': 'str' },
  'returns': 'VirtioStatus'
}

##
# @VirtQueueStatus:
#
# Status of a VirtQueue
#
# @queue_index: VirtQueue queue_index
#
# @inuse: VirtQueue inuse
#
# @vring_num: VirtQueue vring.num
#
# @vring_num_default: VirtQueue vring.num_default
#
# @vring_align: VirtQueue vring.align
#
# @vring_desc: VirtQueue vring.desc
#
# @vring_avail: VirtQueue vring.avail
#
# @vring_used: VirtQueue vring.used
#
# @last_avail_idx: VirtQueue last_avail_idx
#
# @shadow_avail_idx: VirtQueue shadow_avail_idx
#
# @used_idx: VirtQueue used_idx
#
# @signalled_used: VirtQueue signalled_used
#
# @signalled_used_valid: VirtQueue signalled_used_valid
#
# Since: 5.1
#
##

{ 'struct': 'VirtQueueStatus',
  'data': {
    'queue_index': 'uint16',
    'inuse': 'uint32',
    'vring_num': 'int',
    'vring_num_default': 'int',
    'vring_align': 'int',
    'vring_desc': 'uint64',
    'vring_avail': 'uint64',
    'vring_used': 'uint64',
    'last_avail_idx': 'uint16',
    'shadow_avail_idx': 'uint16',
    'used_idx': 'uint16',
    'signalled_used': 'uint16',
    'signalled_used_valid': 'uint16'
  }
}

##
# @virtio-queue-status:
#
# Return the status of a given VirtQueue
#
# @path: QOBject path of the VirtIODevice
#
# @queue: queue number to examine
#
# Returns: Status of the VirtQueue
#
# Since: 5.1
#
# Example:
#
# -> { "execute": "virtio-queue-status",
#      "arguments": {
#          "path": "/machine/peripheral-anon/device[3]/virtio-backend",
#          "queue": 0
#      }
#   }
# <- { "return": {
#      "signalled_used": 373,
#      "inuse": 0,
#      "vring_desc": 864411648,
#      "vring_num_default": 256,
#      "signalled_used_valid": 1,
#      "vring_avail": 864415744,
#      "last_avail_idx": 373,
#      "queue_index": 0,
#      "vring_used": 864416320,
#      "shadow_avail_idx": 619,
#      "used_idx": 373,
#      "vring_num": 256,
#      "vring_align": 4096
#      }
#    }
#
##

{ 'command': 'virtio-queue-status',
  'data': { 'path': 'str', 'queue': 'uint16' },
  'returns': 'VirtQueueStatus'
}

##
# @VirtioRingDesc:
#
# @addr: guest physical address of the descriptor data
#
# @len: length of the descriptor data
#
# @flags: descriptor flags (write-only, read-only, ...)
#
# Since: 5.1
#
##

{ 'struct': 'VirtioRingDesc',
  'data': {
    'addr': 'uint64',
    'len': 'uint32',
    'flags': 'uint16'
  }
}

##
# @VirtioQueueElement:
#
# @index: index of the element in the queue
#
# @len: length of the element data
#
# @ndescs: number of descriptors
#
# @descs: list of the descriptors
#
# Since: 5.1
#
##

{ 'struct': 'VirtioQueueElement',
  'data': {
    'index': 'uint32',
    'len': 'uint32',
    'ndescs': 'uint32',
    'descs': ['VirtioRingDesc']
  }
}

##
# @virtio-queue-element:
#
# Return the information about an element queue (by default head)
#
# @path: QOBject path of the VirtIODevice
#
# @queue: queue number to examine
#
# @index: the index in the queue, by default head
#
# Returns: the element information
#
# Since: 5.1
#
# Example:
#
# -> { "execute": "virtio-queue-element",
#      "arguments": {
#          "path": "/machine/peripheral-anon/device[3]/virtio-backend",
#          "queue": 0
#      }
#   }
# -> { "return": {
#         "index": 109,
#         "len": 0,
#         "ndescs": 1,
#         "descs": [
#             { "flags": 2, "len": 2048, "addr": 853145600 }
#         ]
#      }
#   }
#
##

{ 'command': 'virtio-queue-element',
  'data': { 'path': 'str', 'queue': 'uint16', '*index': 'uint16' },
  'returns': 'VirtioQueueElement'
}
